(provide 'clojure-macros)

(fset 'extract-function
      [?d ?g ?g ?\} ?o ?\(?d ?e ?f ?n ? ?m ?y ?f ?u ?n ?c ?1 ?2 ?3 ? ?\[?\] return escape ?p ?\C-o ?\C-o ?i ?\(?m ?y ?f ?u ?n ?c ?1 ?2 ?3 escape ?b
          ])

(fset 'cljs-extract-to-def
      [?\" ?k ?c ?m ?y ?i ?t ?e ?m ?1 ?2 ?3 escape ?? ?d ?e ?f ?n return ?O escape ?O ?\( ?d ?e ?f ?  ?m ?y ?i ?t ?e ?m ?1 ?2 ?3 ?  escape ?\" ?k ?p ?\C-o ?b])

(fset 'cljs-extract-to-last-let
      [?\" ?k ?c ?m ?y ?i ?t ?e ?m ?1 ?2 ?3 escape ?? ?l ?e ?t return ?/ ?\\ ?\[ return ?a return escape ?O ?m ?y ?i ?t ?e ?m ?1 ?2 ?3 ?  escape ?\" ?k ?p ?\C-o ?\C-o ?b])

(fset 'cljs-extract-hiccup
      [?\" ?k ?c ?\[ ?m ?y ?f ?u ?n ?c ?1 ?2 ?3 escape ?? ?d ?e ?f ?n return ?O escape ?O ?\( ?d ?e ?f ?n ?  ?m ?y ?f ?u ?n ?c ?1 ?2 ?3 ?  ?\[ ?\] return return escape ?k ?p ?J ?\C-o ?b])

(fset 'cljs-extract
      [?\" ?k ?c ?\( ?m ?y ?f ?u ?n ?c ?1 ?2 ?3 escape ?? ?d ?e ?f ?n return ?O escape ?O ?\( ?d ?e ?f ?n ?  ?m ?y ?f ?u ?n ?c ?1 ?2 ?3 ?  ?\[ ?\] return return escape ?k ?p ?J ?\C-o ?b])

(spacemacs/declare-prefix-for-mode 'clojurescript-mode "mR" "Refactor")

(spacemacs/set-leader-keys-for-major-mode 'clojurescript-mode
  "Rd" 'cljs-extract-to-def
  "Rl" 'cljs-extract-to-last-let
  "Re" 'cljs-extract
  "Rh" 'cljs-extract-hiccup)
